# -*- coding: utf-8 -*-
"""染色体.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hnonxTnbx_EDa7iCRa42SHMEvO_ub0Xn
"""

from keras.layers import Input, Dense
from keras.models import Model


# this is the size of our encoded representations
encoding_dim = 32  # 32 floats -> compression of factor 24.5, assuming the input is 784 floats

# this is our input placeholder
input_img = Input(shape=(22500,))
# "encoded" is the encoded representation of the input
encoded = Dense(encoding_dim, activation='relu')(input_img)
# "decoded" is the lossy reconstruction of the input
decoded = Dense(22500, activation='sigmoid')(encoded)

# this model maps an input to its reconstruction
autoencoder = Model(input=input_img, output=decoded)

# this model maps an input to its encoded representation
encoder = Model(input=input_img, output=encoded)

# create a placeholder for an encoded (32-dimensional) input
encoded_input = Input(shape=(encoding_dim,))
# retrieve the last layer of the autoencoder model
decoder_layer = autoencoder.layers[-1]
# create the decoder model
decoder = Model(input=encoded_input, output=decoder_layer(encoded_input))

autoencoder.compile(optimizer='adadelta', loss='binary_crossentropy')

import os
path= "D:\\Learn\\大三下\\summer\\ChromosomesDataSet"

os.chdir(path)
os.listdir(path)

x_train_savepath = './chromosome_r_x_train.npy'
y_train_savepath = './chromosome_r_y_train.npy'

x_test_savepath = './chromosome_r_x_test.npy'
y_test_savepath = './chromosome_r_y_test.npy'

import numpy as np

print('-------------Load Datasets-----------------')
x_train_save = np.load(x_train_savepath)
y_train = np.load(y_train_savepath)
x_test_save = np.load(x_test_savepath)
y_test = np.load(y_test_savepath)
x_train = np.reshape(x_train_save, (len(x_train_save), 150, 150))
x_test = np.reshape(x_test_save, (len(x_test_save), 150, 150))

x_train = x_train.astype('float32') / 255.
x_test = x_test.astype('float32') / 255.
x_train = x_train.reshape((len(x_train), np.prod(x_train.shape[1:])))
x_test = x_test.reshape((len(x_test), np.prod(x_test.shape[1:])))
print(x_train.shape)
print(x_test.shape)

autoencoder.fit(x_train, x_train,
                nb_epoch=1,
                batch_size=4,
                shuffle=True,
                validation_data=(x_test, x_test))

import matplotlib.pyplot as plt
encoded_imgs = encoder.predict(x_test)
decoded_imgs = decoder.predict(encoded_imgs)

x_1 = decoded_imgs[0].reshape(150,150)
plt.imshow(x_1)
print(decoded_imgs.shape)
#
# x_test.shape
# x_test[0].reshape(,13500)
#
# shape = (150, 90)
# fig, axes = plt.subplots(2,10,
#                          figsize=(10, 2),
#                          subplot_kw={
#                              'xticks': [],
#                              'yticks': []
#                          },
#                          gridspec_kw=dict(hspace=0.1, wspace=0.1))
# for i in range(10):
#     axes[0][i].imshow(np.reshape(x_test[i], shape))
#     axes[1][i].imshow(np.reshape(decoded_imgs[i], shape))
# plt.show()